{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","components/App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","type","item","types","map","index","className","key","isFavorite","onClick","ev","elementSelect","currentTarget","addFavorite","id","src","url","title","name","alt","PokeList","listItems","data","list","items","App","state","pokemons","getFavorite","bind","element","elementId","parseInt","this","pokemonFav","findIndex","itemfav","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"65DAmCeA,MA/Bf,SAAiBC,GACf,IAAMC,EAAOD,EAAME,KAAKC,MAAMC,KAAI,SAACD,EAAOE,GACxC,OACE,0BAAMC,UAAU,WAAWC,IAAKF,GAC7BF,MAUP,OACE,wBAAIG,UAAWN,EAAME,KAAKM,WAAa,gBAAkB,OAAQC,QAN/C,SAACC,GACnB,IAAMC,EAAgBD,EAAGE,cACzBZ,EAAMa,YAAYF,IAIqEG,GAAId,EAAME,KAAKY,IACpG,yBAAKR,UAAU,YACb,yBAAKS,IAAKf,EAAME,KAAKc,IAAKC,MAAOjB,EAAME,KAAKgB,KAAMC,IAAKnB,EAAME,KAAKgB,QAEpE,wBAAIZ,UAAU,cAAcN,EAAME,KAAKgB,MACvC,uBAAGZ,UAAU,aAAaL,K,MCZjBmB,MARf,SAAkBpB,GAChB,IAAMqB,EAAYrB,EAAMsB,KAAKC,KAAKnB,KAAI,SAACoB,EAAOnB,GAC5C,OAAO,kBAAC,EAAD,CAASH,KAAMsB,EAAOjB,IAAKF,EAAOQ,YAAab,EAAMa,iBAG9D,OAAO,wBAAIP,UAAU,aAAae,I,OCkCrBI,G,wDAnCb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CACXC,SAAU,CAACJ,SAEb,EAAKK,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,wDAQPC,GACV,IAAMC,EAAYC,SAASF,EAAQhB,IAC5Ba,EAAYM,KAAKP,MAAjBC,SACDO,EAAaP,EAASJ,KAAKY,WAAU,SAACC,GAAD,OAAaA,EAAQtB,KAAOiB,KACnEJ,EAASJ,KAAKW,GAAY1B,WAC5BmB,EAASJ,KAAKW,GAAY1B,YAAa,EAEvCmB,EAASJ,KAAKW,GAAY1B,YAAa,EAEzCyB,KAAKI,SAAS,CACZV,SAAUA,M,+BAIJ,IACDA,EAAYM,KAAKP,MAAjBC,SACP,OACE,yBAAKrB,UAAU,OACb,mDACA,kBAAC,EAAD,CAAUgB,KAAMK,EAAUd,YAAaoB,KAAKL,mB,GA5BlCU,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46f5c571.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../stylesheets/Pokemon.scss';\r\n\r\nfunction Pokemon(props) {\r\n  const type = props.item.types.map((types, index) => {\r\n    return (\r\n      <span className=\"card-tag\" key={index}>\r\n        {types}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  const handleClick = (ev) => {\r\n    const elementSelect = ev.currentTarget;\r\n    props.addFavorite(elementSelect);\r\n  };\r\n\r\n  return (\r\n    <li className={props.item.isFavorite ? 'card favorite' : 'card'} onClick={handleClick} id={props.item.id}>\r\n      <div className=\"card-img\">\r\n        <img src={props.item.url} title={props.item.name} alt={props.item.name} />\r\n      </div>\r\n      <h3 className=\"card-title\">{props.item.name}</h3>\r\n      <p className=\"card-type\">{type}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nPokemon.propTypes = {\r\n  name: PropTypes.string,\r\n  url: PropTypes.string,\r\n  types: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default Pokemon;\r\n","import React from 'react';\r\nimport Pokemon from './Pokemon';\r\nimport '../stylesheets/PokeList.scss';\r\n\r\nfunction PokeList(props) {\r\n  const listItems = props.data.list.map((items, index) => {\r\n    return <Pokemon item={items} key={index} addFavorite={props.addFavorite} />;\r\n  });\r\n\r\n  return <ul className=\"card-list\">{listItems}</ul>;\r\n}\r\n\r\nexport default PokeList;\r\n","import React from 'react';\r\nimport PokeList from './PokeList';\r\nimport list from '../data/data.json';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../stylesheets/App.scss';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pokemons: {list},\r\n    };\r\n    this.getFavorite = this.getFavorite.bind(this);\r\n  }\r\n\r\n  getFavorite(element) {\r\n    const elementId = parseInt(element.id);\r\n    const {pokemons} = this.state;\r\n    const pokemonFav = pokemons.list.findIndex((itemfav) => itemfav.id === elementId);\r\n    if (pokemons.list[pokemonFav].isFavorite) {\r\n      pokemons.list[pokemonFav].isFavorite = false;\r\n    } else {\r\n      pokemons.list[pokemonFav].isFavorite = true;\r\n    }\r\n    this.setState({\r\n      pokemons: pokemons,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {pokemons} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Mi lista de pokemon</h2>\r\n        <PokeList data={pokemons} addFavorite={this.getFavorite} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nApp.propTypes = {\r\n  pokemons: PropTypes.arrayOf(PropTypes.object),\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}